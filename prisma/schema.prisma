// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  phone    String?
  password String

  roles Roles?  @relation(fields: [role], references: [name])
  role  String?

  carts     Carts[]
  cartItems CartItems[]
  invoice   Invoices[]
  profile   Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Roles {
  id   Int     @id @default(autoincrement())
  name String  @unique
  user Users[]
}

model Profile {
  id Int @id @default(autoincrement())

  user   Users? @relation(fields: [userId], references: [id])
  userId Int?   @unique

  locations Locations[]
}

model Carts {
  id       Int @id @default(autoincrement())
  price    Int
  discount Int

  users   Users?  @relation(fields: [userId], references: [id])
  userId  Int?
  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?

  cartItems CartItems[]
  invoices  Invoices[]
}

model CartItems {
  id    Int @id @default(autoincrement())
  qty   Int
  price Int

  carts                Carts?               @relation(fields: [cartId], references: [id])
  cartId               Int?
  users                Users?               @relation(fields: [userId], references: [id])
  userId               Int?
  stores               Stores?              @relation(fields: [storeId], references: [id])
  storeId              Int?
  variantOptionValues  VariantOptionValues? @relation(fields: [variantOptionValueId], references: [id])
  variantOptionValueId Int?
}

model Invoices {
  id                 Int     @id @default(autoincrement())
  price              Int
  serviceCharge      Int
  status             String
  receiverLatitude   Float
  receiverLongtitude Float
  receiverDistrict   String
  receiverPhone      String?
  receiverAddress    String
  receiverName       String
  invoiceNumber      String

  carts  Carts? @relation(fields: [cartId], references: [id])
  cartId Int?
  users  Users? @relation(fields: [userId], references: [id])
  userId Int?

  confirmationPayment ConfirmationPayment?
  courier             Couriers?
  payments            Payments?
  invoiceHistory      InvoiceHistories[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
}

model ConfirmationPayment {
  id     Int    @id @default(autoincrement())
  amount Int
  bank   String

  invoices  Invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId Int       @unique
}

model InvoiceHistories {
  id        Int      @id @default(autoincrement())
  status    String
  createdAt DateTime @default(now())

  invoices  Invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?
}

model Payments {
  id                 Int    @id @default(autoincrement())
  bank               String
  amount             Int
  status             String
  mootaTransactionId Int

  invoice   Invoices @relation(fields: [invoiceId], references: [id])
  invoiceId Int      @unique
}

model Couriers {
  id                 Int    @id @default(autoincrement())
  courierCode        String
  courierServiceName String
  courierServiceCode String
  price              Int
  orderId            Int

  invoices  Invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId Int       @unique
}

model Stores {
  id               Int    @id @default(autoincrement())
  name             String
  slogan           String
  description      String
  domain           String
  logoAttachment   String
  bannerAttachment String

  carts              Carts[]
  cartItems          CartItems[]
  products           Products[]
  bankAccounts       BankAccounts[]
  storeOnDecorations StoreOnDecorations[]
  operationHours     OperationHours[]
  messageTemplate    MessageTemplate[]
  location           Locations[]
}

model StoreOnDecorations {
  id Int @id @default(autoincrement())

  decorations  Decorations? @relation(fields: [decorationId], references: [id])
  decorationId Int?
  stores       Stores?      @relation(fields: [storeId], references: [id])
  storeId      Int?
}

model Decorations {
  id                 Int                  @id @default(autoincrement())
  storeOnDecorations StoreOnDecorations[]
}

model OperationHours {
  id      Int     @id @default(autoincrement())
  day     String
  openAt  Int
  closeAt Int
  isOff   Boolean

  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?
}

model MessageTemplate {
  id      Int    @id @default(autoincrement())
  name    String
  content String

  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?
}

model Locations {
  id             Int     @id @default(autoincrement())
  name           String
  address        String
  postalCode     Int
  cityDistrict   String
  latitude       Float
  longtitude     Float
  isMainLocation Boolean

  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

model BankAccounts {
  id        Int    @id @default(autoincrement())
  bank      String
  accNumber Int
  accName   String

  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?
}

model Products {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  attachments  String[]
  isActive     Boolean
  minimumOrder Int

  stores  Stores? @relation(fields: [storeId], references: [id])
  storeId Int?

  variants   Variants[]
  categories Categories[]
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String

  products  Products? @relation(fields: [productId], references: [id])
  productId Int?
}

model Variants {
  id       Int     @id @default(autoincrement())
  name     String
  isActive Boolean

  products  Products? @relation(fields: [productId], references: [id])
  productId Int?

  variantOptions VariantOptions[]
}

model VariantOptions {
  id   Int    @id @default(autoincrement())
  name String

  variant   Variants? @relation(fields: [variantId], references: [id])
  variantId Int?

  variantOptionValue    VariantOptionValues? @relation(fields: [variantOptionValuesId], references: [id])
  variantOptionValuesId Int?                 @unique
}

model VariantOptionValues {
  id       Int     @id @default(autoincrement())
  sku      String
  weight   Float
  stock    Int
  price    Float
  isActive Boolean

  cartItems      CartItems[]
  variantOptions VariantOptions?
}
